
//#include <DHT.h>

const int flameSensor1 = A0;
const int flameSensor2 = A1;
const int flameSensor3 = A2;

const int motor1 = 9;
const int motor2 = 8;
const int motor3 = 7;
const int motor4 = 6;

const int sensorMin = 0;     // sensor minimum
const int sensorMax = 1024;  // sensor maximum

#define servo 3
#define pump 4
#define DHTPIN A6      // Pin where the sensor is connected
#define DHTTYPE DHT11  // or DHT22


//DHT dht(DHTPIN, DHTTYPE);


const int buzzer = 13;

int gasSensorPin = A3;


int gasValue = 0;

const int threshold = 800;     // Flame threshold
const int stopDistance = 100;  // Approximate stop distance (based on your sensor)

String espCommand = "";        // Buffer to store commands from ESP32
bool isAutomaticMode = false;  // Start in automatic mode by default
bool isAIMode = false;         // Start in automatic mode by default

// Function to handle commands from ESP32
void handleESPCommand(String command) {
  command.trim();  // Remove leading/trailing whitespace
  Serial.println(command);
  if (command == "MODE:MANUAL") {
    isAutomaticMode = false;
    stopMotors();
    Serial.println("Switched to Manual Mode");
  } else if (command == "MODE:AUTO") {
    isAutomaticMode = true;
    Serial.println("Switched to Automatic Mode");
  } else if (command == "MODE:AI") isAIMode = true;
  else if (command == "MODE:NOAI") isAIMode = false;
  else if (!isAutomaticMode || isAIMode) {
    // Manual mode commands
    if (command.startsWith("MOVE:")) {
      if (command == "MOVE:LEFT") {
        moveToFlame("left");
      } else if (command == "MOVE:RIGHT") {
        moveToFlame("right");
      } else if (command == "MOVE:FORWARD") {
        moveToFlame("forward");
      } else if (command == "MOVE:BACKWARD") {
        moveToFlame("backward");
      }
    } else if (command == "STOP") {
      stopMotors();
    } else if (command == "MODE:ACTIVATE") {
      digitalWrite(pump, LOW);               // Activate pump
      unsigned long startTime = millis();    // Record the start time
      while (millis() - startTime < 5000) {  // Loop for 5000 milliseconds (5 seconds)
        // Sweep from 90° to 40°
        for (int angle = 90; angle >= 40; angle -= 3) {
          servoPulse(servo, angle);
        }
        // Sweep from 40° to 90°
        for (int angle = 40; angle <= 90; angle += 3) {
          servoPulse(servo, angle);
        }
      }
    } else if (command == "MODE:DEACTIVATE") {
      digitalWrite(pump, HIGH);  // Activate pump
    }
  } else {
    Serial.println("Cannot execute command in Automatic Mode");
  }
}

// Function to move motors towards flame
void moveToFlame(String direction) {
  if (direction == "left") {
    digitalWrite(motor1, HIGH);
    digitalWrite(motor2, LOW);
    digitalWrite(motor3, LOW);
    digitalWrite(motor4, HIGH);
  } else if (direction == "right") {
    digitalWrite(motor1, LOW);
    digitalWrite(motor2, HIGH);
    digitalWrite(motor3, HIGH);
    digitalWrite(motor4, LOW);
  } else if (direction == "forward") {
    digitalWrite(motor1, LOW);
    digitalWrite(motor2, HIGH);
    digitalWrite(motor3, LOW);
    digitalWrite(motor4, HIGH);
  } else if (direction == "backward") {
    digitalWrite(motor1, HIGH);
    digitalWrite(motor2, LOW);
    digitalWrite(motor3, HIGH);
    digitalWrite(motor4, LOW);
  }
}

// Function to stop all motors
void stopMotors() {
  digitalWrite(motor1, LOW);
  digitalWrite(motor2, LOW);
  digitalWrite(motor3, LOW);
  digitalWrite(motor4, LOW);
}

// Servo pulse function
void servoPulse(int pin, int angle) {
  int pwm = (angle * 11) + 500;  // Convert angle to microseconds
  digitalWrite(pin, HIGH);
  delayMicroseconds(pwm);
  digitalWrite(pin, LOW);
  delay(50);  // Refresh cycle for servo
}


void setup() {
  Serial.begin(115200);
  Serial1.begin(9600);  // Serial communication for ESP32 commands

  //dht.begin();

  // Setup sensors and pins
  pinMode(flameSensor1, INPUT);
  // pinMode(flameSensor2, INPUT);
  pinMode(flameSensor3, INPUT);

  pinMode(motor1, OUTPUT);
  pinMode(motor2, OUTPUT);
  pinMode(motor3, OUTPUT);
  pinMode(motor4, OUTPUT);
  pinMode(servo, OUTPUT);
  pinMode(pump, OUTPUT);
  pinMode(buzzer, OUTPUT);
//  pinMode(ENA, OUTPUT);

  digitalWrite(pump, HIGH);  // Initialize pump as active
  digitalWrite(buzzer, LOW);

  stopMotors();  // Stop all motors initially
}

void loop() {
  // Handle commands from ESP32
  if (Serial1.available()) {
    espCommand = Serial1.readStringUntil('\n');
    Serial.println(espCommand);
    handleESPCommand(espCommand);
  }

  if (isAutomaticMode && !isAIMode) {

    // Automatic mode logic for flame sensors
    int reading1 = analogRead(flameSensor1);
    int reading2 = analogRead(flameSensor2);
    int reading3 = analogRead(flameSensor3);


    Serial.print("Sensor 1: ");
    Serial.println(reading1);
    Serial.print("Sensor 3: ");
    Serial.println(reading3);

    // التحقق من أقرب حساس يكشف لهبًا
    if (reading1 < 900 || reading2 < 900 || reading3 < 900) {
    if (reading1 <= reading2 && reading1 <= reading3) {
      // حساس 1 هو الأقرب
      moveToFlame("left");
    } else if (reading2 <= reading1 && reading2 <= reading3) {
      // حساس 2 هو الأقرب
      moveToFlame("forward");
    } else if (reading3 <= reading1 && reading3 <= reading2) {
      // حساس 3 هو الأقرب
      moveToFlame("right");
    }
    
  } else  {
    // لا يوجد لهب
    stopMotors();
  }
    

    if(reading1 < 100 || reading2 < 100 || reading3 < 100){
		stopMotors();
    digitalWrite(pump, 0);
for(int angle = 90; angle >= 40; angle -= 3){
servoPulse(servo, angle);
}
for(int angle = 40; angle <= 90; angle += 3){
servoPulse(servo, angle);
}
}else if (reading1 > 300 || reading2 > 300 || reading3 > 300) {
      // حساس 3 هو الأقرب
    digitalWrite(pump, 1);
    }
 
  delay(300); // تأخير لقراءة مستقرة
  }
  }
